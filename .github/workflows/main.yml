name: Continuous integration pipeline
on:
   push:
      branches:
      - main
   pull_request:
jobs:
    build-L475_monitoring_node:
      name: Build the L475_monitoring_node binary
      runs-on: ubuntu-20.04
      steps:
      - name: Checkout the repository
        uses: actions/checkout@v3.1.0
      - name: Determine short GIT hash
        id: short-sha
        run: |
          echo "sha=$(echo ${{github.sha}} | sed 's/^\(.\{10\}\).*$/\1/')" >> $GITHUB_OUTPUT
      - name: Bump version
        if: github.ref == 'refs/heads/master'
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          dry_run: true
          default_bump: minor
          fetch_all_tags: true
      - name: Version handling
        id: version_handling
        run: |
          # Use the bumped version when on master or otherwise 0.0.0
          if [ -z ${{ steps.tag_version.outputs.new_tag }} ]
          then
            version=0.0.0
            file_postfix=${{ steps.short-sha.outputs.sha }}-dev
          else
            version=${{ steps.tag_version.outputs.new_version }}
            file_postfix=$version
          fi
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "file_postfix=$file_postfix" >> $GITHUB_OUTPUT
          echo "major=$(echo $version | sed 's/\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\).*/\1/')" >> $GITHUB_OUTPUT
          echo "minor=$(echo $version | sed 's/\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\).*/\2/')" >> $GITHUB_OUTPUT
          echo "bugfix=$(echo $version | sed 's/\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\).*/\3/')" >> $GITHUB_OUTPUT
      - name: Build the L475_monitoring_node binary
        uses: xanderhendriks/action-build-stm32cubeide@v10.0
        with:
          project-path: 'L475_monitoring_node'
          project-target: 'L475_monitoring_node/Debug'
        env:
          ENV_VERSION_MAJOR: ${{ steps.version_handling.outputs.major }}
          ENV_VERSION_MINOR: ${{ steps.version_handling.outputs.minor }}
          ENV_VERSION_BUGFIX: ${{ steps.version_handling.outputs.bugfix }}
          ENV_SHORT_GIT_HASH: ${{ steps.short-sha.outputs.sha }}
      - name: Rename and copy files
        run: |
          mkdir stm32-firmware
          cp L475_monitoring_node/Debug/L475_monitoring_node.elf stm32-firmware/L475_monitoring_node-${{ steps.version_handling.outputs.file_postfix }}.elf
          cp L475_monitoring_node/Debug/L475_monitoring_node.list stm32-firmware/L475_monitoring_node-${{ steps.version_handling.outputs.file_postfix }}.list
      - name: Upload L475_monitoring_node artifacts
        uses: actions/upload-artifact@v3.1.0
        with:
          name: stm32-firmware-L475_monitoring_node-${{ steps.version_handling.outputs.file_postfix }}
          path: stm32-firmware
    build-L475_notifying_node:
      name: Build the L475_notifying_node binary
      runs-on: ubuntu-20.04
      steps:
      - name: Checkout the repository
        uses: actions/checkout@v3.1.0
      - name: Determine short GIT hash
        id: short-sha
        run: |
          echo "sha=$(echo ${{github.sha}} | sed 's/^\(.\{10\}\).*$/\1/')" >> $GITHUB_OUTPUT
      - name: Bump version
        if: github.ref == 'refs/heads/master'
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          dry_run: true
          default_bump: minor
          fetch_all_tags: true
      - name: Version handling
        id: version_handling
        run: |
          # Use the bumped version when on master or otherwise 0.0.0
          if [ -z ${{ steps.tag_version.outputs.new_tag }} ]
          then
            version=0.0.0
            file_postfix=${{ steps.short-sha.outputs.sha }}-dev
          else
            version=${{ steps.tag_version.outputs.new_version }}
            file_postfix=$version
          fi
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "file_postfix=$file_postfix" >> $GITHUB_OUTPUT
          echo "major=$(echo $version | sed 's/\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\).*/\1/')" >> $GITHUB_OUTPUT
          echo "minor=$(echo $version | sed 's/\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\).*/\2/')" >> $GITHUB_OUTPUT
          echo "bugfix=$(echo $version | sed 's/\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\).*/\3/')" >> $GITHUB_OUTPUT
      - name: Build the L475_notifying_node binary
        uses: xanderhendriks/action-build-stm32cubeide@v10.0
        with:
          project-path: 'L475_notifying_node'
          project-target: 'L475_notifying_node/Debug'
        env:
          ENV_VERSION_MAJOR: ${{ steps.version_handling.outputs.major }}
          ENV_VERSION_MINOR: ${{ steps.version_handling.outputs.minor }}
          ENV_VERSION_BUGFIX: ${{ steps.version_handling.outputs.bugfix }}
          ENV_SHORT_GIT_HASH: ${{ steps.short-sha.outputs.sha }}
      - name: Rename and copy files
        run: |
          mkdir stm32-firmware
          cp L475_notifying_node/Debug/L475_notifying_node.elf stm32-firmware/L475_notifying_node-${{ steps.version_handling.outputs.file_postfix }}.elf
          cp L475_notifying_node/Debug/L475_notifying_node.list stm32-firmware/L475_notifying_node-${{ steps.version_handling.outputs.file_postfix }}.list
      - name: Upload L475_notifying_node artifacts
        uses: actions/upload-artifact@v3.1.0
        with:
          name: stm32-firmware-L475_notifying_node-${{ steps.version_handling.outputs.file_postfix }}
          path: stm32-firmware
    release:
      needs: [build-L475_notifying_node, build-L475_monitoring_node]
      name: Release packages to Github
      runs-on: ubuntu-20.04
      steps:
        - name: Download artifacts
          uses: actions/download-artifact@v3.0.1
          with:
            path: stm32-firmware
        - name: Determine version
          id: determine_version
          run: |
            if [ -n "$(find stm32-firmware -name 'stm32-firmware-L475_notifying_node-*-dev')" ]
            then
                version=0.0.0
                file_postfix=$(find stm32-firmware -name "stm32-firmware-L475_notifying_node-*" | sed 's/stm32-firmware\/stm32-firmware-L475_notifying_node-\(.*\)/\1/')
            else
                version=$(find stm32-firmware -name "stm32-firmware-L475_notifying_node-*" | sed 's/stm32-firmware\/stm32-firmware-L475_notifying_node-\([0-9\.]*\)/\1/')
                file_postfix=$version
            fi
            echo "version=$version" >> $GITHUB_OUTPUT
            echo "file_postfix=$file_postfix" >> $GITHUB_OUTPUT
        - name: Release to Github
          id: create_release
          uses: ncipollo/release-action@v1.11.1
          with:
            token: ${{ secrets.GITHUB_TOKEN }}
            tag: v${{ steps.determine_version.outputs.file_postfix }}
            name: v${{ steps.determine_version.outputs.file_postfix }}
            commit: ${{ github.sha }}
            draft: false
            prerelease: false
            artifacts: "stm32-firmware/stm32-firmware-*/*"